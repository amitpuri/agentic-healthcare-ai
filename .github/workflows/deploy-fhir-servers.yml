name: Deploy FHIR Servers Multi-Cloud

on:
  workflow_dispatch:
    inputs:
      cloud_providers:
        description: 'Cloud providers to deploy FHIR servers to'
        required: true
        type: choice
        default: 'all'
        options:
          - all
          - gcp
          - aws
          - azure
          - gcp,aws
          - gcp,azure
          - aws,azure
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      fhir_version:
        description: 'FHIR version to deploy'
        required: true
        default: 'R4'
        type: choice
        options:
          - DSTU2
          - STU3
          - R4
          - R5
      deployment_options:
        description: 'Additional deployment options'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - with_analytics
          - with_synthea_data
          - minimal
      notification_webhook:
        description: 'Slack/Teams webhook for notifications (optional)'
        required: false
        type: string

env:
  # Common FHIR Configuration
  FHIR_VERSION: ${{ github.event.inputs.fhir_version }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  DEPLOYMENT_OPTIONS: ${{ github.event.inputs.deployment_options }}
  
  # GCP Configuration
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GCP_DATASET_ID: healthcare-ai-dataset
  GCP_FHIR_STORE_ID: fhir-store
  
  # AWS Configuration  
  AWS_REGION: us-east-1
  AWS_HEALTHLAKE_DATASTORE_NAME: healthcare-ai-datastore
  
  # Azure Configuration
  AZURE_LOCATION: eastus
  AZURE_RESOURCE_GROUP: healthcare-ai-fhir-rg
  AZURE_FHIR_SERVICE_NAME: healthcare-ai-fhir

jobs:
  restricted:
    if: github.actor == 'amitpuri'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Only amitpuri can trigger this"

  setup:
    runs-on: ubuntu-latest
    outputs:
      should-deploy-gcp: ${{ steps.check-providers.outputs.should-deploy-gcp }}
      should-deploy-aws: ${{ steps.check-providers.outputs.should-deploy-aws }}
      should-deploy-azure: ${{ steps.check-providers.outputs.should-deploy-azure }}
      environment: ${{ github.event.inputs.environment }}
      deployment-timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Generate deployment timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Check which providers to deploy
        id: check-providers
        run: |
          PROVIDERS="${{ github.event.inputs.cloud_providers }}"
          
          if [[ "$PROVIDERS" == "all" || "$PROVIDERS" == *"gcp"* ]]; then
            echo "should-deploy-gcp=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-gcp=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PROVIDERS" == "all" || "$PROVIDERS" == *"aws"* ]]; then
            echo "should-deploy-aws=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-aws=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PROVIDERS" == "all" || "$PROVIDERS" == *"azure"* ]]; then
            echo "should-deploy-azure=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-azure=false" >> $GITHUB_OUTPUT
          fi

      - name: Send deployment start notification
        if: github.event.inputs.notification_webhook != ''
        run: |
          curl -X POST "${{ github.event.inputs.notification_webhook }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "🚀 FHIR Server Deployment Started",
              "attachments": [{
                "color": "warning",
                "fields": [
                  {"title": "Environment", "value": "${{ env.ENVIRONMENT }}", "short": true},
                  {"title": "FHIR Version", "value": "${{ env.FHIR_VERSION }}", "short": true},
                  {"title": "Clouds", "value": "${{ github.event.inputs.cloud_providers }}", "short": true},
                  {"title": "Options", "value": "${{ env.DEPLOYMENT_OPTIONS }}", "short": true}
                ]
              }]
            }' || true

  deploy-gcp-fhir:
    needs: setup
    if: needs.setup.outputs.should-deploy-gcp == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Enable required APIs
        run: |
          gcloud services enable healthcare.googleapis.com
          gcloud services enable cloudbuild.googleapis.com
          gcloud services enable container.googleapis.com

      - name: Create Healthcare Dataset
        run: |
          DATASET_NAME="${{ env.GCP_DATASET_ID }}-${{ env.ENVIRONMENT }}"
          
          # Check if dataset exists
          if ! gcloud healthcare datasets describe $DATASET_NAME --location=${{ env.GCP_REGION }} &>/dev/null; then
            echo "Creating Healthcare Dataset: $DATASET_NAME"
            gcloud healthcare datasets create $DATASET_NAME \
              --location=${{ env.GCP_REGION }}
          else
            echo "Dataset $DATASET_NAME already exists"
          fi

      - name: Create FHIR Store with Enhanced Configuration
        run: |
          DATASET_NAME="${{ env.GCP_DATASET_ID }}-${{ env.ENVIRONMENT }}"
          FHIR_STORE_NAME="${{ env.GCP_FHIR_STORE_ID }}-${{ env.ENVIRONMENT }}"
          
          # Configure streaming based on deployment options
          if [[ "${{ env.DEPLOYMENT_OPTIONS }}" == "with_analytics" || "${{ env.DEPLOYMENT_OPTIONS }}" == "standard" ]]; then
            STREAM_CONFIG='[{
              "bigqueryDestination": {
                "datasetUri": "bq://${{ env.GCP_PROJECT_ID }}.healthcare_analytics_${{ env.ENVIRONMENT }}",
                "schemaConfig": {
                  "schemaType": "ANALYTICS",
                  "recursiveStructureDepth": "3"
                }
              }
            }]'
          else
            STREAM_CONFIG='[]'
          fi
          
          # Check if FHIR store exists
          if ! gcloud healthcare fhir-stores describe $FHIR_STORE_NAME \
               --dataset=$DATASET_NAME \
               --location=${{ env.GCP_REGION }} &>/dev/null; then
            echo "Creating FHIR Store: $FHIR_STORE_NAME with options: ${{ env.DEPLOYMENT_OPTIONS }}"
            
            if [[ "${{ env.DEPLOYMENT_OPTIONS }}" == "minimal" ]]; then
              # Minimal configuration for development/testing
              gcloud healthcare fhir-stores create $FHIR_STORE_NAME \
                --dataset=$DATASET_NAME \
                --location=${{ env.GCP_REGION }} \
                --version=${{ env.FHIR_VERSION }}
            else
              # Full configuration with streaming and features
              gcloud healthcare fhir-stores create $FHIR_STORE_NAME \
                --dataset=$DATASET_NAME \
                --location=${{ env.GCP_REGION }} \
                --version=${{ env.FHIR_VERSION }} \
                --enable-update-create \
                --stream-configs="$STREAM_CONFIG"
            fi
          else
            echo "FHIR Store $FHIR_STORE_NAME already exists"
          fi

      - name: Configure FHIR Store Settings
        run: |
          DATASET_NAME="${{ env.GCP_DATASET_ID }}-${{ env.ENVIRONMENT }}"
          FHIR_STORE_NAME="${{ env.GCP_FHIR_STORE_ID }}-${{ env.ENVIRONMENT }}"
          
          # Update FHIR store with SMART on FHIR configuration
          gcloud healthcare fhir-stores update $FHIR_STORE_NAME \
            --dataset=$DATASET_NAME \
            --location=${{ env.GCP_REGION }} \
            --enable-update-create \
            --complex-data-type-reference-parsing=ENABLED

      - name: Create BigQuery Dataset for Analytics
        run: |
          DATASET_ID="healthcare_analytics_${{ env.ENVIRONMENT }}"
          
          if ! bq show --dataset ${{ env.GCP_PROJECT_ID }}:$DATASET_ID &>/dev/null; then
            echo "Creating BigQuery dataset: $DATASET_ID"
            bq mk --dataset \
              --location=${{ env.GCP_REGION }} \
              --description="Healthcare Analytics Dataset for ${{ env.ENVIRONMENT }}" \
              ${{ env.GCP_PROJECT_ID }}:$DATASET_ID
          else
            echo "BigQuery dataset $DATASET_ID already exists"
          fi

      - name: Test FHIR Server Connectivity
        run: |
          DATASET_NAME="${{ env.GCP_DATASET_ID }}-${{ env.ENVIRONMENT }}"
          FHIR_STORE_NAME="${{ env.GCP_FHIR_STORE_ID }}-${{ env.ENVIRONMENT }}"
          
          # Get access token
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          
          # Test capability statement
          FHIR_BASE_URL="https://healthcare.googleapis.com/v1/projects/${{ env.GCP_PROJECT_ID }}/locations/${{ env.GCP_REGION }}/datasets/$DATASET_NAME/fhirStores/$FHIR_STORE_NAME/fhir"
          
          echo "Testing FHIR Server at: $FHIR_BASE_URL"
          curl -H "Authorization: Bearer $ACCESS_TOKEN" \
               -H "Content-Type: application/fhir+json" \
               "$FHIR_BASE_URL/metadata" | jq '.fhirVersion'

      - name: Output GCP FHIR Configuration
        run: |
          DATASET_NAME="${{ env.GCP_DATASET_ID }}-${{ env.ENVIRONMENT }}"
          FHIR_STORE_NAME="${{ env.GCP_FHIR_STORE_ID }}-${{ env.ENVIRONMENT }}"
          FHIR_BASE_URL="https://healthcare.googleapis.com/v1/projects/${{ env.GCP_PROJECT_ID }}/locations/${{ env.GCP_REGION }}/datasets/$DATASET_NAME/fhirStores/$FHIR_STORE_NAME/fhir"
          
          echo "=== GCP FHIR Server Configuration ==="
          echo "FHIR Base URL: $FHIR_BASE_URL"
          echo "Dataset: $DATASET_NAME"
          echo "FHIR Store: $FHIR_STORE_NAME"
          echo "Version: ${{ env.FHIR_VERSION }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "======================================="

  deploy-aws-fhir:
    needs: setup
    if: needs.setup.outputs.should-deploy-aws == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create HealthLake Data Store with Marketplace Features
        run: |
          DATASTORE_NAME="${{ env.AWS_HEALTHLAKE_DATASTORE_NAME }}-${{ env.ENVIRONMENT }}"
          
          # Configure preload data based on deployment options
          if [[ "${{ env.DEPLOYMENT_OPTIONS }}" == "with_synthea_data" ]]; then
            PRELOAD_CONFIG="PreloadDataType=SYNTHEA"
          else
            PRELOAD_CONFIG=""
          fi
          
          # Set up KMS encryption for production
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            SSE_CONFIG="--sse-configuration KmsEncryptionConfig={CmkType=AWS_OWNED_KMS_KEY}"
          else
            SSE_CONFIG=""
          fi
          
          # Check if data store exists
          if ! aws healthlake describe-fhir-datastore \
               --datastore-id "$DATASTORE_NAME" \
               --region ${{ env.AWS_REGION }} &>/dev/null; then
            
            echo "Creating AWS HealthLake Data Store: $DATASTORE_NAME"
            echo "Options: ${{ env.DEPLOYMENT_OPTIONS }}, Environment: ${{ env.ENVIRONMENT }}"
            
            # Build create command based on options
            CREATE_CMD="aws healthlake create-fhir-datastore \
              --datastore-type-version ${{ env.FHIR_VERSION }} \
              --datastore-name \"$DATASTORE_NAME\" \
              --region ${{ env.AWS_REGION }} \
              --output text --query 'DatastoreId'"
            
            if [[ -n "$PRELOAD_CONFIG" ]]; then
              CREATE_CMD="$CREATE_CMD --preload-data-config $PRELOAD_CONFIG"
            fi
            
            if [[ -n "$SSE_CONFIG" ]]; then
              CREATE_CMD="$CREATE_CMD $SSE_CONFIG"
            fi
            
            # Add tags for better resource management
            CREATE_CMD="$CREATE_CMD --tags Key=Environment,Value=${{ env.ENVIRONMENT }} Key=FHIRVersion,Value=${{ env.FHIR_VERSION }} Key=DeploymentOptions,Value=${{ env.DEPLOYMENT_OPTIONS }}"
            
            DATASTORE_ID=$(eval $CREATE_CMD)
            
            echo "Created HealthLake Data Store with ID: $DATASTORE_ID"
            echo "DATASTORE_ID=$DATASTORE_ID" >> $GITHUB_ENV
            
            # Wait for data store to become active (with timeout for large preloads)
            echo "Waiting for data store to become active..."
            if [[ "${{ env.DEPLOYMENT_OPTIONS }}" == "with_synthea_data" ]]; then
              echo "Synthea data preload may take 30-60 minutes..."
            fi
            
            aws healthlake wait fhir-datastore-active \
              --datastore-id "$DATASTORE_ID" \
              --region ${{ env.AWS_REGION }}
          else
            echo "HealthLake Data Store $DATASTORE_NAME already exists"
            DATASTORE_ID=$(aws healthlake list-fhir-datastores \
              --region ${{ env.AWS_REGION }} \
              --query "DatastorePropertiesList[?DatastoreName=='$DATASTORE_NAME'].DatastoreId" \
              --output text)
            echo "DATASTORE_ID=$DATASTORE_ID" >> $GITHUB_ENV
          fi

      - name: Configure HealthLake Integration with Analytics
        run: |
          # Create S3 bucket for exports
          BUCKET_NAME="healthcare-ai-exports-${{ env.ENVIRONMENT }}-$(date +%s)"
          aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
          
          # Create IAM role for HealthLake exports
          cat > trust-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "healthlake.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
          EOF
          
          ROLE_NAME="HealthLakeExportRole-${{ env.ENVIRONMENT }}"
          aws iam create-role \
            --role-name $ROLE_NAME \
            --assume-role-policy-document file://trust-policy.json \
            --region ${{ env.AWS_REGION }} || true
          
          # Attach policies
          aws iam attach-role-policy \
            --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess \
            --region ${{ env.AWS_REGION }} || true
          
          echo "S3_EXPORT_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Test HealthLake FHIR API
        run: |
          if [ -n "$DATASTORE_ID" ]; then
            echo "Testing HealthLake FHIR API..."
            
            # Get the FHIR endpoint
            FHIR_ENDPOINT=$(aws healthlake describe-fhir-datastore \
              --datastore-id "$DATASTORE_ID" \
              --region ${{ env.AWS_REGION }} \
              --query 'DatastoreProperties.DatastoreEndpoint' \
              --output text)
            
            echo "FHIR Endpoint: $FHIR_ENDPOINT"
            echo "FHIR_ENDPOINT=$FHIR_ENDPOINT" >> $GITHUB_ENV
            
            # Test capability statement (this requires proper IAM permissions)
            echo "FHIR endpoint is available at: $FHIR_ENDPOINT"
          fi

      - name: Output AWS FHIR Configuration
        run: |
          echo "=== AWS HealthLake Configuration ==="
          echo "Data Store ID: ${DATASTORE_ID:-Not Available}"
          echo "FHIR Endpoint: ${FHIR_ENDPOINT:-Not Available}"
          echo "S3 Export Bucket: ${S3_EXPORT_BUCKET:-Not Available}"
          echo "Version: ${{ env.FHIR_VERSION }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "====================================="

  deploy-azure-fhir:
    needs: setup
    if: needs.setup.outputs.should-deploy-azure == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          RESOURCE_GROUP="${{ env.AZURE_RESOURCE_GROUP }}-${{ env.ENVIRONMENT }}"
          
          az group create \
            --name $RESOURCE_GROUP \
            --location ${{ env.AZURE_LOCATION }} || true
          
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV

      - name: Deploy Azure Health Data Services Workspace
        run: |
          WORKSPACE_NAME="healthcare-ai-workspace-${{ env.ENVIRONMENT }}"
          
          # Check if workspace exists
          if ! az healthcareapis workspace show \
               --workspace-name $WORKSPACE_NAME \
               --resource-group $RESOURCE_GROUP &>/dev/null; then
            
            echo "Creating Azure Health Data Services Workspace: $WORKSPACE_NAME"
            az healthcareapis workspace create \
              --workspace-name $WORKSPACE_NAME \
              --resource-group $RESOURCE_GROUP \
              --location ${{ env.AZURE_LOCATION }} \
              --tags environment=${{ env.ENVIRONMENT }}
          else
            echo "Workspace $WORKSPACE_NAME already exists"
          fi
          
          echo "WORKSPACE_NAME=$WORKSPACE_NAME" >> $GITHUB_ENV

      - name: Deploy Azure Health Data Services FHIR Service
        run: |
          FHIR_SERVICE_NAME="${{ env.AZURE_FHIR_SERVICE_NAME }}-${{ env.ENVIRONMENT }}"
          TENANT_ID=$(az account show --query tenantId -o tsv)
          
          # Check if FHIR service exists
          if ! az healthcareapis fhir-service show \
               --fhir-service-name $FHIR_SERVICE_NAME \
               --workspace-name $WORKSPACE_NAME \
               --resource-group $RESOURCE_GROUP &>/dev/null; then
            
            echo "Creating Azure Health Data Services FHIR Service: $FHIR_SERVICE_NAME"
            echo "Options: ${{ env.DEPLOYMENT_OPTIONS }}, Environment: ${{ env.ENVIRONMENT }}"
            
            # Configure FHIR service based on deployment options
            if [[ "${{ env.DEPLOYMENT_OPTIONS }}" == "minimal" ]]; then
              # Minimal configuration for development
              az healthcareapis fhir-service create \
                --fhir-service-name $FHIR_SERVICE_NAME \
                --workspace-name $WORKSPACE_NAME \
                --resource-group $RESOURCE_GROUP \
                --location ${{ env.AZURE_LOCATION }} \
                --kind "fhir-${{ env.FHIR_VERSION }}" \
                --authentication-configuration authority="https://login.microsoftonline.com/$TENANT_ID" \
                --authentication-configuration audience="https://$WORKSPACE_NAME-$FHIR_SERVICE_NAME.fhir.azurehealthcareapis.com" \
                --tags environment=${{ env.ENVIRONMENT }} deployment-options=${{ env.DEPLOYMENT_OPTIONS }}
            else
              # Full configuration with export capabilities and enhanced security
              az healthcareapis fhir-service create \
                --fhir-service-name $FHIR_SERVICE_NAME \
                --workspace-name $WORKSPACE_NAME \
                --resource-group $RESOURCE_GROUP \
                --location ${{ env.AZURE_LOCATION }} \
                --kind "fhir-${{ env.FHIR_VERSION }}" \
                --authentication-configuration authority="https://login.microsoftonline.com/$TENANT_ID" \
                --authentication-configuration audience="https://$WORKSPACE_NAME-$FHIR_SERVICE_NAME.fhir.azurehealthcareapis.com" \
                --authentication-configuration smart-proxy-enabled=true \
                --cors-configuration origins="https://*.azurewebsites.net" \
                --cors-configuration headers="*" \
                --cors-configuration methods="GET,POST,PUT,DELETE,OPTIONS" \
                --cors-configuration max-age=3600 \
                --cors-configuration allow-credentials=true \
                --export-configuration-storage-account-name "" \
                --tags environment=${{ env.ENVIRONMENT }} deployment-options=${{ env.DEPLOYMENT_OPTIONS }} fhir-version=${{ env.FHIR_VERSION }}
            fi
            
            echo "Waiting for FHIR service to be ready..."
            sleep 60 # Allow time for service initialization
          else
            echo "FHIR Service $FHIR_SERVICE_NAME already exists"
          fi
          
          echo "FHIR_SERVICE_NAME=$FHIR_SERVICE_NAME" >> $GITHUB_ENV

      - name: Configure FHIR Service Analytics
        run: |
          # Create storage account for FHIR data export
          STORAGE_ACCOUNT_NAME="healthcaredata$(echo ${{ env.ENVIRONMENT }} | tr -d '-')$(date +%s | tail -c 6)"
          
          az storage account create \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group $RESOURCE_GROUP \
            --location ${{ env.AZURE_LOCATION }} \
            --sku Standard_LRS \
            --tags environment=${{ env.ENVIRONMENT }} || true
          
          echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV

      - name: Test Azure FHIR Service
        run: |
          echo "Getting FHIR Service details..."
          
          # Get FHIR service endpoint
          FHIR_ENDPOINT=$(az healthcareapis fhir-service show \
            --fhir-service-name $FHIR_SERVICE_NAME \
            --workspace-name $WORKSPACE_NAME \
            --resource-group $RESOURCE_GROUP \
            --query "properties.authenticationConfiguration.audience" \
            --output tsv)
          
          echo "FHIR_ENDPOINT=$FHIR_ENDPOINT" >> $GITHUB_ENV
          echo "Azure FHIR Service endpoint: $FHIR_ENDPOINT"

      - name: Output Azure FHIR Configuration
        run: |
          echo "=== Azure Health Data Services Configuration ==="
          echo "Resource Group: ${RESOURCE_GROUP}"
          echo "Workspace: ${WORKSPACE_NAME}"
          echo "FHIR Service: ${FHIR_SERVICE_NAME}"
          echo "FHIR Endpoint: ${FHIR_ENDPOINT}"
          echo "Storage Account: ${STORAGE_ACCOUNT_NAME}"
          echo "Version: ${{ env.FHIR_VERSION }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "================================================"

  marketplace-alternatives:
    needs: setup
    if: needs.setup.outputs.should-deploy-aws == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: List Available FHIR Marketplace Options
        run: |
          echo "=== Available FHIR Server Marketplace Options ==="
          echo ""
          echo "🔵 AWS Marketplace FHIR Solutions:"
          echo "  • AWS HealthLake (Native) - Deployed ✅"
          echo "  • InterSystems IRIS for Health on AWS"
          echo "  • Smile CDR on AWS"
          echo "  • Redox FHIR Server on AWS"
          echo "  • Datavant FHIR Server"
          echo ""
          echo "🟢 GCP Marketplace FHIR Solutions:"
          echo "  • Google Cloud Healthcare API (Native) - Deployed ✅"
          echo "  • InterSystems IRIS for Health on GCP"
          echo "  • Smile CDR on GCP"
          echo "  • HAPI FHIR Server"
          echo ""
          echo "🟣 Azure Marketplace FHIR Solutions:"
          echo "  • Azure Health Data Services (Native) - Deployed ✅"
          echo "  • InterSystems IRIS for Health on Azure"
          echo "  • Smile CDR on Azure"
          echo "  • Microsoft Healthcare Bot with FHIR"
          echo ""
          echo "🔄 Multi-Cloud FHIR Solutions:"
          echo "  • AWS HealthLake → GCP BigQuery integration"
          echo "  • Azure FHIR → AWS S3 data lake"
          echo "  • Cross-cloud FHIR federation setup"
          echo "================================================"

      - name: Check Third-Party FHIR Server Availability
        run: |
          echo "Checking marketplace availability for third-party FHIR servers..."
          
          # Check InterSystems IRIS availability (example)
          echo "• InterSystems IRIS for Health - Available on all clouds"
          echo "• Smile CDR - Available on AWS, GCP, Azure"
          echo "• HAPI FHIR - Open source, deployable anywhere"
          echo "• Cerner SMART on FHIR - Available via marketplace"

  validate-deployments:
    needs: [setup, deploy-gcp-fhir, deploy-aws-fhir, deploy-azure-fhir, marketplace-alternatives]
    if: always() && (needs.deploy-gcp-fhir.result == 'success' || needs.deploy-aws-fhir.result == 'success' || needs.deploy-azure-fhir.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "=== Multi-Cloud FHIR Deployment Summary ==="
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "FHIR Version: ${{ env.FHIR_VERSION }}"
          echo "Deployment Options: ${{ env.DEPLOYMENT_OPTIONS }}"
          echo "Timestamp: ${{ needs.setup.outputs.deployment-timestamp }}"
          echo ""
          
          echo "✅ Native Cloud FHIR Services Deployed:"
          echo "  • GCP Healthcare API: ${{ needs.deploy-gcp-fhir.result }}"
          echo "  • AWS HealthLake: ${{ needs.deploy-aws-fhir.result }}"
          echo "  • Azure Health Data Services: ${{ needs.deploy-azure-fhir.result }}"
          echo ""
          
          echo "🛒 Marketplace alternatives are available for:"
          echo "  • Third-party FHIR servers (InterSystems, Smile CDR)"
          echo "  • Open source solutions (HAPI FHIR)"
          echo "  • Specialized healthcare platforms"
          echo ""
          
          echo "🎉 Multi-cloud FHIR deployment completed successfully!"
          echo "=============================================="

      - name: Send completion notification
        if: github.event.inputs.notification_webhook != ''
        run: |
          # Determine overall status
          if [[ "${{ needs.deploy-gcp-fhir.result }}" == "success" || "${{ needs.deploy-aws-fhir.result }}" == "success" || "${{ needs.deploy-azure-fhir.result }}" == "success" ]]; then
            STATUS="success"
            COLOR="good"
            EMOJI="✅"
          else
            STATUS="failure"
            COLOR="danger"
            EMOJI="❌"
          fi
          
          curl -X POST "${{ github.event.inputs.notification_webhook }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"$EMOJI FHIR Server Deployment Complete\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"fields\": [
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Environment\", \"value\": \"${{ env.ENVIRONMENT }}\", \"short\": true},
                  {\"title\": \"GCP\", \"value\": \"${{ needs.deploy-gcp-fhir.result }}\", \"short\": true},
                  {\"title\": \"AWS\", \"value\": \"${{ needs.deploy-aws-fhir.result }}\", \"short\": true},
                  {\"title\": \"Azure\", \"value\": \"${{ needs.deploy-azure-fhir.result }}\", \"short\": true},
                  {\"title\": \"Options\", \"value\": \"${{ env.DEPLOYMENT_OPTIONS }}\", \"short\": true}
                ]
              }]
            }" || true

  update-application-config:
    needs: [validate-deployments]
    if: needs.validate-deployments.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update FHIR configuration files
        run: |
          # Create or update environment-specific FHIR configuration
          mkdir -p config/fhir
          
          cat > config/fhir/fhir-endpoints-${{ env.ENVIRONMENT }}.yaml << EOF
          # FHIR Server Endpoints - ${{ env.ENVIRONMENT }} Environment
          # Generated by GitHub Actions on $(date)
          
          gcp:
            enabled: ${{ needs.setup.outputs.should-deploy-gcp }}
            base_url: "https://healthcare.googleapis.com/v1/projects/${{ env.GCP_PROJECT_ID }}/locations/${{ env.GCP_REGION }}/datasets/${{ env.GCP_DATASET_ID }}-${{ env.ENVIRONMENT }}/fhirStores/${{ env.GCP_FHIR_STORE_ID }}-${{ env.ENVIRONMENT }}/fhir"
            version: "${{ env.FHIR_VERSION }}"
            auth_type: "service_account"
            
          aws:
            enabled: ${{ needs.setup.outputs.should-deploy-aws }}
            # Note: AWS HealthLake endpoint is set after datastore creation
            version: "${{ env.FHIR_VERSION }}"
            auth_type: "aws_credentials"
            
          azure:
            enabled: ${{ needs.setup.outputs.should-deploy-azure }}
            # Note: Azure FHIR endpoint is set after service creation
            version: "${{ env.FHIR_VERSION }}"
            auth_type: "azure_ad"
          EOF
          
          echo "Created FHIR configuration file: config/fhir/fhir-endpoints-${{ env.ENVIRONMENT }}.yaml"

      - name: Commit configuration updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add config/fhir/
          git commit -m "Update FHIR endpoints configuration for ${{ env.ENVIRONMENT }} environment" || exit 0
          git push || exit 0 