# Healthcare AI Docker Compose Configuration
# Uses centralized configuration management

services:
  # Healthcare AI Agents
  crewai-healthcare-agent:
    build:
      context: ..
      dockerfile: crewai_fhir_agent/Dockerfile
    image: crewai-healthcare-agent:latest
    container_name: crewai-healthcare-agent
    ports:
      - "${CREWAI_PORT:-8000}:8000"
    env_file:
      - ../.env
    environment:
      - SERVICE_NAME=crewai-agent
      - SERVICE_PORT=8000
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - NETWORK_HOST=${NETWORK_HOST:-localhost}
      - NETWORK_PROTOCOL=${NETWORK_PROTOCOL:-http}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./volumes/crewai-logs:/app/logs
      - ./volumes/crewai-data:/app/data
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  autogen-healthcare-agent:
    build:
      context: ..
      dockerfile: autogen_fhir_agent/Dockerfile
    image: autogen-healthcare-agent:latest
    container_name: autogen-healthcare-agent
    ports:
      - "${AUTOGEN_PORT:-8001}:8001"
    env_file:
      - ../.env
    environment:
      - SERVICE_NAME=autogen-agent
      - SERVICE_PORT=8001
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - NETWORK_HOST=${NETWORK_HOST:-localhost}
      - NETWORK_PROTOCOL=${NETWORK_PROTOCOL:-http}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./volumes/autogen-logs:/app/logs
      - ./volumes/autogen-data:/app/data
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Agent Backend
  agent-backend:
    build:
      context: ..
      dockerfile: agent_backend/Dockerfile
    image: agent-backend:latest
    container_name: agent-backend
    ports:
      - "${AGENT_BACKEND_PORT:-8002}:8002"
    env_file:
      - ../.env
    environment:
      - SERVICE_NAME=agent-backend
      - SERVICE_PORT=8002
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - NETWORK_HOST=${NETWORK_HOST:-localhost}
      - NETWORK_PROTOCOL=${NETWORK_PROTOCOL:-http}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./volumes/backend-logs:/app/logs
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FHIR Services
  fhir-proxy:
    build:
      context: ..
      dockerfile: fhir_proxy/Dockerfile
    image: fhir-proxy:latest
    container_name: fhir-proxy
    ports:
      - "${FHIR_PROXY_PORT:-8003}:8003"
    env_file:
      - ../.env
    environment:
      - SERVICE_NAME=fhir-proxy
      - SERVICE_PORT=8003
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - NETWORK_HOST=${NETWORK_HOST:-localhost}
      - NETWORK_PROTOCOL=${NETWORK_PROTOCOL:-http}
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  fhir-mcp-server:
    build:
      context: ..
      dockerfile: fhir_mcp_server/Dockerfile
    image: fhir-mcp-server:latest
    container_name: fhir-mcp-server
    ports:
      - "${FHIR_MCP_PORT:-8004}:8004"
    env_file:
      - ../.env
    environment:
      - SERVICE_NAME=fhir-mcp-server
      - SERVICE_PORT=8004
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - NETWORK_HOST=${NETWORK_HOST:-localhost}
      - NETWORK_PROTOCOL=${NETWORK_PROTOCOL:-http}
      - FHIR_MCP_HOST=0.0.0.0
      - FHIR_MCP_PORT=8004
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  hapi-fhir:
    image: hapiproject/hapi:v6.8.0
    container_name: hapi-fhir
    ports:
      - "${HAPI_FHIR_PORT:-8080}:8080"
    environment:
      - hapi.fhir.server.url=http://hapi-fhir:8080/fhir
      - hapi.fhir.validation.enabled=true
      - spring.datasource.url=jdbc:postgresql://postgres:5432/${DATABASE_NAME:-healthcare_ai}
      - spring.datasource.username=${DATABASE_USERNAME:-postgres}
      - spring.datasource.password=${DATABASE_PASSWORD:-postgres}
      - spring.datasource.driverClassName=org.postgresql.Driver
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
      - JAVA_OPTS=-Xmx2g -Xms2g
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/fhir/metadata"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend UI
  healthcare-ui:
    build:
      context: ..
      dockerfile: ui/Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT:-development}
        - NETWORK_HOST=${NETWORK_HOST:-localhost}
        - NETWORK_PROTOCOL=${NETWORK_PROTOCOL:-http}
        - REACT_APP_FHIR_BASE_URL=http://hapi-fhir:8080/fhir
    image: healthcare-ui:latest
    container_name: healthcare-ui
    ports:
      - "${UI_PORT:-3030}:80"
    env_file:
      - ../.env
    environment:
      - SERVICE_NAME=ui
      - SERVICE_PORT=80
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - NETWORK_HOST=${NETWORK_HOST:-localhost}
      - NETWORK_PROTOCOL=${NETWORK_PROTOCOL:-http}
    depends_on:
      crewai-healthcare-agent:
        condition: service_healthy
      autogen-healthcare-agent:
        condition: service_healthy
      agent-backend:
        condition: service_healthy
      fhir-proxy:
        condition: service_healthy
      fhir-mcp-server:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Services
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-healthcare_ai}
      - POSTGRES_USER=${DATABASE_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - ./volumes/postgres-data:/var/lib/postgresql/data
      - ./services/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-postgres} -d ${DATABASE_NAME:-healthcare_ai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - ./volumes/redis-data:/data
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Monitoring Services (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-15d}'
    volumes:
      - ./services/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./volumes/prometheus-data:/prometheus
    networks:
      - healthcare-network
    restart: unless-stopped
    profiles: ["monitoring"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - ./services/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./services/monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./volumes/grafana-data:/var/lib/grafana
    networks:
      - healthcare-network
    restart: unless-stopped
    profiles: ["monitoring"]
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - healthcare-ui
      - agent-backend
    networks:
      - healthcare-network
    restart: unless-stopped
    profiles: ["load-balancer"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - healthcare-network
    restart: unless-stopped
    profiles: ["logging"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    profiles: ["logging"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: logstash
    ports:
      - "${LOGSTASH_PORT:-5044}:5044"
    volumes:
      - ./services/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    networks:
      - healthcare-network
    restart: unless-stopped
    profiles: ["logging"]
    healthcheck:
      test: ["CMD-SHELL", "logstash -t --config.test_and_exit"]
      interval: 60s
      timeout: 50s
      retries: 3

networks:
  healthcare-network:
    driver: bridge
    name: healthcare-ai-network-new

volumes:
  postgres-data:
    name: healthcare-ai-postgres-data
  redis-data:
    name: healthcare-ai-redis-data
  prometheus-data:
    name: healthcare-ai-prometheus-data
  grafana-data:
    name: healthcare-ai-grafana-data
  elasticsearch-data:
    name: healthcare-ai-elasticsearch-data

# Configuration profiles for different environments
# Usage:
#   Development: NETWORK_HOST=localhost docker-compose -f docker/docker-compose.config.yml up
#   Custom Host: NETWORK_HOST=myserver.local docker-compose -f docker/docker-compose.config.yml up
#   With monitoring: docker-compose -f docker/docker-compose.config.yml --profile monitoring up  
#   With logging: docker-compose -f docker/docker-compose.config.yml --profile logging up
#   With load balancer: docker-compose -f docker/docker-compose.config.yml --profile load-balancer up
#   Production: ENVIRONMENT=production EXTERNAL_HOST=myapp.com docker-compose -f docker/docker-compose.config.yml up 