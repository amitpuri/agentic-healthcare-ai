version: '3.8'

services:
  # Agent Backend Service (unified backend for both frameworks)
  agent-backend:
    build:
      context: ..
      dockerfile: agent_backend/Dockerfile
    image: healthcare-ai/agent-backend:latest
    container_name: agent-backend
    ports:
      - "8002:8002"
    env_file:
      - ../.env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FHIR_SERVER_URL=http://hapi-fhir:8080/fhir
      - FHIR_AUTH_TOKEN=${FHIR_AUTH_TOKEN:-}
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/healthcare_ai}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=docker
      - PYTHONPATH=/app:/app/shared:/app/autogen_fhir_agent:/app/crewai_fhir_agent
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    volumes:
      - ./volumes/agent-logs:/app/logs
      - ./volumes/agent-data:/app/data
      - ../autogen_fhir_agent:/app/autogen_fhir_agent
      - ../crewai_fhir_agent:/app/crewai_fhir_agent
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Healthcare AI Agents
  crewai-healthcare-agent:
    build:
      context: ..
      dockerfile: crewai_fhir_agent/Dockerfile
    image: healthcare-ai/crewai-healthcare-agent:latest
    container_name: crewai-healthcare-agent
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FHIR_SERVER_URL=http://hapi-fhir:8080/fhir
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/healthcare_ai}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    volumes:
      - ./volumes/crewai-logs:/app/logs
      - ./volumes/crewai-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  autogen-healthcare-agent:
    build:
      context: ..
      dockerfile: autogen_fhir_agent/Dockerfile
    image: healthcare-ai/autogen-healthcare-agent:latest
    container_name: autogen-healthcare-agent
    ports:
      - "8001:8001"
    env_file:
      - ../.env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FHIR_SERVER_URL=http://hapi-fhir:8080/fhir
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/healthcare_ai}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    volumes:
      - ./volumes/autogen-logs:/app/logs
      - ./volumes/autogen-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FHIR Proxy Service
  fhir-proxy:
    build:
      context: ..
      dockerfile: fhir_proxy/Dockerfile
    image: healthcare-ai/fhir-proxy:latest
    container_name: fhir-proxy
    ports:
      - "8003:8003"
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FHIR MCP Server
  fhir-mcp-server:
    build:
      context: ..
      dockerfile: fhir_mcp_server/Dockerfile
    image: healthcare-ai/fhir-mcp-server:latest
    container_name: fhir-mcp-server
    ports:
      - "8004:8004"
    environment:
      - FHIR_MCP_HOST=0.0.0.0
      - FHIR_MCP_PORT=8004
      - FHIR_MCP_SERVER_URL=http://localhost:8004
      - FHIR_MCP_FHIR__BASE_URL=http://hapi-fhir:8080/fhir
      - FHIR_MCP_FHIR__ACCESS_TOKEN=${FHIR_ACCESS_TOKEN:-}
      - FHIR_MCP_FHIR__TIMEOUT=30
      # FHIR_MCP_USE_SIMPLE removed - only simple server available
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend UI
  healthcare-ui:
    build:
      context: ..
      dockerfile: ui/Dockerfile
      args:
        - REACT_APP_AGENT_BACKEND_URL=${REACT_APP_AGENT_BACKEND_URL:-http://localhost:8002}
        - REACT_APP_FHIR_PROXY_URL=${REACT_APP_FHIR_PROXY_URL:-http://localhost:8003}
        - REACT_APP_FHIR_MCP_URL=${REACT_APP_FHIR_MCP_URL:-http://localhost:8004}
        - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT:-docker}
        - REACT_APP_OPENAI_API_KEY=${OPENAI_API_KEY}
    image: healthcare-ai/healthcare-ui:latest
    container_name: healthcare-ui
    ports:
      - "3030:80"
    env_file:
      - ../.env
    environment:
      - REACT_APP_CREWAI_API_URL=http://localhost:8000
      - REACT_APP_AUTOGEN_API_URL=http://localhost:8001
      - REACT_APP_AGENT_BACKEND_URL=http://localhost:8002
      - REACT_APP_FHIR_PROXY_URL=http://localhost:8003
      - REACT_APP_FHIR_MCP_URL=http://localhost:8004
      - REACT_APP_ENVIRONMENT=docker
    depends_on:
      - crewai-healthcare-agent
      - autogen-healthcare-agent
      - fhir-proxy
      - fhir-mcp-server
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HAPI FHIR Server
  hapi-fhir:
    image: hapiproject/hapi:v6.8.0
    container_name: hapi-fhir
    ports:
      - "8080:8080"
    environment:
      - hapi.fhir.server.url=http://hapi-fhir:8080/fhir
      - hapi.fhir.validation.enabled=true
      - spring.datasource.url=jdbc:postgresql://postgres:5432/healthcare_ai
      - spring.datasource.username=postgres
      - spring.datasource.password=${POSTGRES_PASSWORD:-postgres}
      - spring.datasource.driverClassName=org.postgresql.Driver
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
      - JAVA_OPTS=-Xmx2g -Xms2g
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/fhir/metadata"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=healthcare_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./volumes/postgres-data:/var/lib/postgresql/data
      - ./services/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - ./volumes/redis-data:/data
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./services/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./volumes/prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - ./volumes/grafana-data:/var/lib/grafana
      - ./services/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./services/monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    depends_on:
      - prometheus
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./services/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./services/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - healthcare-ui
      - crewai-healthcare-agent
      - autogen-healthcare-agent
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  healthcare-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  crewai-logs:
    driver: local
  crewai-data:
    driver: local
  autogen-logs:
    driver: local
  autogen-data:
    driver: local
  agent-logs:
    driver: local
  agent-data:
    driver: local 